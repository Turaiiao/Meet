
// Infix expression to postfix expression.

impl Stack {

    init -> println 'init Stack'

    pub var stack: list<any> = []

    fun push (value: any) -> any {
        stack.insert(value)

        return value
    }

    fun peek () -> any -> stack.at(stack.length - 1)

    fun at (position: int) -> any -> stack.at(position)

    fun size () -> int -> stack.length

    fun pop () -> any {
        var value = stack.at(stack.length - 1)

        stack.remove(stack.length - 1)

        return value
    }
}

fun getPriority (str: string) -> int {
    var a: map<str, int> = [('+', 1), ('-', 1), ('*', 2), ('/', 2), ('(', 3), (')', 3)]

    return a.at(str)
}

fun isDigit (str: string) -> boolean -> str == '0' | str == '1' | str == '2' | str == '3' |
    str == '4' | str == '5' | str == '6' | str == '7' | str == '8' | str == '9'

fun toPostfix (expr: string) -> list<any> {
    var position = 0

    var stack = new Stack(), result = new Stack()

    while position < expr.length - 1 {
        var str = expr.at(position)

        if str == '\n' | str == '\t' | str == '\r' | str == ' ' {
            position += 1

            continue
        }

        if isDigit(str) {
            result.push(str)

            position += 1

            continue
        }

        if str == '+' | str == '-' | str == '*' | str == '/' | str == '(' | str == ')' {

            if stack.size() == 0 | str == '(' {
                stack.push(str)

                position += 1

                continue
            }

            if str == ')' {
                while stack.size() != 0 & stack.peek() != '(' ->
                    result.push(stack.pop())

                position += 1

                continue
            }

            if getPriority(str) <= getPriority(stack.peek()) {
                var a = stack.size() - 1

                while getPriority(str) <= getPriority(stack.at(a)) {
                    if stack.at(a) != '(' ->
                        result.push(stack.pop())
                    else {
                        stack.pop()

                        break
                    }

                    if (a -= 1) == -1 ->
                        break
                }

                result.push(str)
            } else -> 
                result.push(str)
        }

        position += 1
    }

    while stack.size() != 0 -> result.push(stack.pop())

    return result.stack
}

// [ 1, 2, 3, *, +, 4, - ]
println toPostfix ('1 + 2 * 3 - 4')